import requests
import time
import threading
from datetime import datetime

class CovidTracker:
    def __init__(self, api_url, api_key, interval=300):
        self.api_url = api_url
        self.api_key = api_key
        self.interval = interval
        self.is_running = False

    def start(self):
        self.is_running = True
        thread = threading.Thread(target=self.run)
        thread.daemon = True
        thread.start()

    def stop(self):
        self.is_running = False

    def run(self):
        while self.is_running:
            try:
                headers = {"Authorization": f"Bearer {self.api_key}"}
                response = requests.get(self.api_url, headers=headers)
                response.raise_for_status()
                data = response.json()
                self.process_data(data)
            except requests.exceptions.RequestException as e:
                print(f"API request error: {e}")
            except Exception as e:
                print(f"Error: {e}")
            time.sleep(self.interval)

    def process_data(self, data):
        # Example data processing:
        global_cases = data['global']['total_confirmed']
        global_deaths = data['global']['total_deaths']
        print(f"Global Cases: {global_cases:,}  Global Deaths: {global_deaths:,}")
        print(f"Last Updated: {datetime.fromtimestamp(data['last_updated'] / 1000).strftime('%Y-%m-%d %H:%M:%S')}")
        print("-" * 30)

# Example API URL and API Key (replace with your actual values)
api_url = "https://api.example.com/covid19/stats"  # Replace with your actual API URL
api_key = "fc240b588fmsh900205683b8c9a0p1347c1jsnb89f7d4bea92"
# Create and start the tracker
tracker = CovidTracker(api_url, api_key, interval=300)  # Update interval (in seconds) as needed
tracker.start()

# Run some other code or let the tracker run indefinitely
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    tracker.stop()
    print("Tracker stopped.")
