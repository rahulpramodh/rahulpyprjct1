import time
import threading
import requests

class RealTimeMonitor:
    def __init__(self, api_key, api_endpoint, interval=1):
        self.api_key = api_key
        self.api_endpoint = api_endpoint
        self.interval = interval
        self.is_running = False

    def start(self):
        self.is_running = True
        thread = threading.Thread(target=self.run)
        thread.daemon = True
        thread.start()

    def stop(self):
        self.is_running = False

    def run(self):
        while self.is_running:
            try:
                headers = {"Authorization": f"Bearer {self.api_key}"}
                response = requests.get(self.api_endpoint, headers=headers)
                response.raise_for_status()  # Raise an exception for bad status codes
                data = response.json()
                # Extract the relevant data from the API response
                value = data['your_data_key']  # Replace with the actual data key
                print(f"Current value: {value}")
            except requests.exceptions.RequestException as e:
                print(f"API request error: {e}")
            except KeyError as e:
                print(f"Data key not found in API response: {e}")
            except Exception as e:
                print(f"Error: {e}")
            time.sleep(self.interval)

# Example API endpoint and data key (replace with your actual values)
api_key = 1fe3741fb231400eca767a96c149a120
api_endpoint = "https://api.example.com/data"  # Replace with your API endpoint

# Create and start the monitor
monitor = RealTimeMonitor(api_key, api_endpoint, interval=0.5)
monitor.start()

# Run some other code or let the monitor run indefinitely
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    monitor.stop()
    print("Monitor stopped.")
